"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instagrapi = void 0;
var Request_service_1 = require("./Request.service");
var _UTILS_1 = require("../utils/index.js");
var InstagramApiService = (function () {
    function InstagramApiService(config) {
        try {
            this.proxy = config.proxy ? new URL('/', config.proxy).href : '';
        }
        catch (error) {
            this.proxy = '';
        }
        this.request = new Request_service_1.RequestService(config.sessionId);
    }
    InstagramApiService.prototype.getProfile = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var user, profile, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.request.api(username)];
                    case 1:
                        user = (_a.sent()).graphql.user;
                        profile = {
                            username: user.username,
                            image: {
                                standard: this.proxy + user.profile_pic_url,
                                hd: this.proxy + user.profile_pic_url_hd
                            },
                            qtyPosts: user.edge_owner_to_timeline_media.count,
                            followers: user.edge_followed_by.count,
                            following: user.edge_follow.count,
                            name: user.full_name,
                            biography: user.biography,
                            externalUrl: user.external_url,
                            isBusiness: user.is_business_account,
                            isVerified: user.is_verified,
                            isPrivate: user.is_private
                        };
                        return [2, profile];
                    case 2:
                        error_1 = _a.sent();
                        _UTILS_1.GeneralUtil.logger('GET-PROFILE', error_1);
                        throw new Error('Username not found');
                    case 3: return [2];
                }
            });
        });
    };
    InstagramApiService.prototype.getLastPosts = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var user, edges, lastPosts, error_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.request.api(username)];
                    case 1:
                        user = (_a.sent()).graphql.user;
                        edges = user.edge_owner_to_timeline_media.edges;
                        lastPosts = edges.map(function (_a) {
                            var media = _a.node;
                            return ({
                                postUrl: _UTILS_1.GeneralUtil.getPostUrl(media.shortcode),
                                image: _this.proxy + media.display_url,
                                video: media.is_video
                                    ? {
                                        url: _this.proxy + media.video_url,
                                        views: media === null || media === void 0 ? void 0 : media.video_view_count
                                    }
                                    : null,
                                content: _UTILS_1.InstragramUtil.getCaption(media),
                                likes: media.edge_liked_by.count,
                                qtyComments: media.edge_media_to_comment.count
                            });
                        });
                        return [2, lastPosts];
                    case 2:
                        error_2 = _a.sent();
                        _UTILS_1.GeneralUtil.logger('GET-LAST-POSTS', error_2);
                        throw new Error('Username not found');
                    case 3: return [2];
                }
            });
        });
    };
    InstagramApiService.prototype.getPost = function (postUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var item_1, carouselMedia, candidates, user, coauthors, commentList, post, error_3;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.request.api(postUrl)];
                    case 1:
                        item_1 = (_a.sent()).items[0];
                        carouselMedia = item_1.carousel_media;
                        candidates = carouselMedia ? carouselMedia[0].image_versions2.candidates : item_1.image_versions2.candidates;
                        user = item_1.user;
                        coauthors = item_1.coauthor_producers;
                        commentList = item_1.comments;
                        post = {
                            postUrl: _UTILS_1.GeneralUtil.getPostUrl(item_1.code),
                            image: _UTILS_1.InstragramUtil.getMediaQualities(candidates, this.proxy),
                            video: item_1.video_versions
                                ? {
                                    url: _UTILS_1.InstragramUtil.getMediaQualities(item_1.video_versions, this.proxy),
                                    type: item_1.product_type,
                                    views: item_1.view_count,
                                    duration: item_1.video_duration,
                                    audio: _UTILS_1.InstragramUtil.getAudioData(item_1)
                                }
                                : null,
                            content: item_1.caption.text,
                            likes: item_1.like_count,
                            qtyComments: item_1.comment_count,
                            gallery: carouselMedia
                                ? carouselMedia.map(function (media) {
                                    var _a;
                                    var _b = _UTILS_1.InstragramUtil.getMediaQualities(media.image_versions2.candidates, _this.proxy), standard = _b.standard, hd = _b.hd;
                                    var taggeds = (_a = media.usertags) === null || _a === void 0 ? void 0 : _a.in;
                                    return {
                                        image: { standard: standard, hd: hd },
                                        video: media.video_versions
                                            ? {
                                                url: _UTILS_1.InstragramUtil.getMediaQualities(media.video_versions, _this.proxy),
                                                type: item_1.product_type,
                                                duration: media.video_duration
                                            }
                                            : null,
                                        taggedUsers: taggeds
                                            ? taggeds.map(function (tag) { return ({
                                                image: _this.proxy + tag.user.profile_pic_url,
                                                name: tag.user.full_name,
                                                isVerified: tag.user.is_verified,
                                                position: tag.position
                                            }); })
                                            : []
                                    };
                                })
                                : [],
                            author: {
                                username: user.username,
                                name: user.full_name,
                                image: this.proxy + user.profile_pic_url,
                                isVerified: user.is_verified,
                                isPrivate: user.is_private
                            },
                            coauthors: coauthors
                                ? coauthors.map(function (author) { return ({
                                    username: author.username,
                                    name: author.full_name,
                                    image: _this.proxy + author.profile_pic_url,
                                    isPrivate: author.is_private,
                                    isVerified: author.is_verified
                                }); })
                                : [],
                            previewComments: _UTILS_1.InstragramUtil.getComments(commentList, this.proxy),
                            location: _UTILS_1.InstragramUtil.getLocation(item_1.location),
                            date: _UTILS_1.GeneralUtil.msToDate(item_1.taken_at)
                        };
                        return [2, post];
                    case 2:
                        error_3 = _a.sent();
                        _UTILS_1.GeneralUtil.logger('GET-POST', error_3);
                        throw new Error('Post url not found');
                    case 3: return [2];
                }
            });
        });
    };
    return InstagramApiService;
}());
exports.Instagrapi = InstagramApiService;
